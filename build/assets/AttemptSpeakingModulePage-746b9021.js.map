{"version":3,"file":"AttemptSpeakingModulePage-746b9021.js","sources":["../../node_modules/react-bootstrap/esm/ProgressBar.js","../../src/components/ieltstest/speaking/Waves.jsx","../../src/components/ieltstest/speaking/SpeakingFooter.jsx","../../src/pages/ieltstest/speaking/AttemptSpeakingModulePage.jsx"],"sourcesContent":["\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ROUND_PRECISION = 1000;\n\n/**\n * Validate that children, if any, are instances of `ProgressBar`.\n */\nfunction onlyProgressBar(props, propName, componentName) {\n  const children = props[propName];\n  if (!children) {\n    return null;\n  }\n  let error = null;\n  React.Children.forEach(children, child => {\n    if (error) {\n      return;\n    }\n\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    const element = /*#__PURE__*/_jsx(ProgressBar, {});\n    if (child.type === element.type) return;\n    const childType = child.type;\n    const childIdentifier = /*#__PURE__*/React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(`Children of ${componentName} can contain only ProgressBar ` + `components. Found ${childIdentifier}.`);\n  });\n  return error;\n}\nfunction getPercentage(now, min, max) {\n  const percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\nfunction renderProgressBar({\n  min,\n  now,\n  max,\n  label,\n  visuallyHidden,\n  striped,\n  animated,\n  className,\n  style,\n  variant,\n  bsPrefix,\n  ...props\n}, ref) {\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...props,\n    role: \"progressbar\",\n    className: classNames(className, `${bsPrefix}-bar`, {\n      [`bg-${variant}`]: variant,\n      [`${bsPrefix}-bar-animated`]: animated,\n      [`${bsPrefix}-bar-striped`]: animated || striped\n    }),\n    style: {\n      width: `${getPercentage(now, min, max)}%`,\n      ...style\n    },\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    children: visuallyHidden ? /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: label\n    }) : label\n  });\n}\nconst ProgressBar = /*#__PURE__*/React.forwardRef(({\n  isChild = false,\n  ...rest\n}, ref) => {\n  const props = {\n    min: 0,\n    max: 100,\n    animated: false,\n    visuallyHidden: false,\n    striped: false,\n    ...rest\n  };\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n  const {\n    min,\n    now,\n    max,\n    label,\n    visuallyHidden,\n    striped,\n    animated,\n    bsPrefix,\n    variant,\n    className,\n    children,\n    ...wrapperProps\n  } = props;\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...wrapperProps,\n    className: classNames(className, bsPrefix),\n    children: children ? map(children, child => /*#__PURE__*/cloneElement(child, {\n      isChild: true\n    })) : renderProgressBar({\n      min,\n      now,\n      max,\n      label,\n      visuallyHidden,\n      striped,\n      animated,\n      bsPrefix,\n      variant\n    }, ref)\n  });\n});\nProgressBar.displayName = 'ProgressBar';\nexport default ProgressBar;","import React from \"react\";\nimport \"./Waves.css\";\n\nconst Waves = ({ isSpeaking, background = \"primary\" }) => {\n  return (\n    <div\n      className={`d-flex justify-content-center align-items-center bg-${background}`}\n      style={{ height: \"30px\" }}\n    >\n      {isSpeaking ? (\n        <div className=\"d-flex justify-content-between align-items-center\">\n          <div className=\"waveform-bar animated rounded\"></div>\n          <div className=\"waveform-bar animated rounded\"></div>\n          <div className=\"waveform-bar animated rounded\"></div>\n        </div>\n      ) : (\n        <div className=\"d-flex justify-content-between align-items-center\">\n          <div className=\"waveform-dot\"></div>\n          <div className=\"waveform-dot\"></div>\n          <div className=\"waveform-dot\"></div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Waves;\n","import React, { useState, useEffect } from \"react\";\nimport CountdownTimer from \"../../elements/CountdownTimer\";\nimport {\n  Row,\n  Col,\n  Container,\n  Button,\n  Stack,\n  Badge,\n  Card,\n  ProgressBar,\n} from \"react-bootstrap\";\nimport {\n  MdKeyboardDoubleArrowRight,\n  MdMic,\n  MdPause,\n  MdPauseCircleFilled,\n} from \"react-icons/md\";\nimport Waves from \"./Waves\";\n\nconst SpeakingFooter = ({\n  deviceType,\n  isSpeaking,\n  setIsSpeaking,\n  currentQuestion,\n  setCurrentQuestion,\n  currentSection,\n  setCurrentSection,\n  setIsEndTest,\n  module,\n  userAllResponse,\n  setUserAllResponse,\n  handleConfirmEndTest,\n  testStarted,\n  setIsTestStarted,\n  setMicAccessError,\n}) => {\n  const [audioURL, setAudioURL] = useState(\"\");\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [isPaused, setIsPaused] = useState(false);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [intervalId, setIntervalId] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [totalQuestions, setTotalQuestions] = useState(0);\n\n  const [audioCurrentSection, setAudioCurrentSection] =\n    useState(currentSection);\n  const [timeToThink, setTimeToThink] = useState(5);\n  const [questionInstruction, setQuestionInstruction] = useState(null);\n\n  useEffect(() => {\n    // Update timeToThink based on the current section\n    console.log(\"audioCurrent Section\", currentSection.section);\n    switch (currentSection.section) {\n      case \"Part 1\":\n        setTimeToThink(5);\n        setQuestionInstruction(null);\n        break;\n      case \"Part 2\":\n        setTimeToThink(60);\n        setQuestionInstruction(\"Speak for approximately 2 minutes.\");\n        break;\n      case \"Part 3\":\n        setTimeToThink(10);\n        setQuestionInstruction(null);\n        break;\n      default:\n        setTimeToThink(5);\n        setQuestionInstruction(null);\n    }\n  }, [currentQuestion]);\n\n  useEffect(() => {\n    let timerId;\n\n    if (testStarted && timeToThink > 0) {\n      // Test is paused when timeToThink is active\n      pauseRecording();\n\n      // Start a timer that decreases timeToThink every second\n      timerId = setInterval(() => {\n        setTimeToThink((prevTime) => prevTime - 1);\n      }, 1000);\n    } else if (timeToThink === 0) {\n      // Resume the test when timeToThink is over\n      resumeRecording();\n    }\n\n    // Clear the interval when component unmounts or timeToThink changes\n    return () => clearInterval(timerId);\n  }, [timeToThink, currentQuestion]);\n\n  useEffect(() => {\n    // Calculate total questions\n    let count = 0;\n    module.sections.forEach((section) => {\n      count += section.questions.length;\n    });\n    setTotalQuestions(count);\n  }, [module]);\n\n  useEffect(() => {\n    // Calculate progress\n    let completedQuestions = 0;\n    for (let i = 0; i < module.sections.length; i++) {\n      const section = module.sections[i];\n      if (section === currentSection) {\n        completedQuestions +=\n          currentSection.questions.indexOf(currentQuestion) + 1;\n        break;\n      } else {\n        completedQuestions += section.questions.length;\n      }\n    }\n    setProgress((completedQuestions / totalQuestions) * 100);\n  }, [currentQuestion, currentSection, module, totalQuestions]);\n\n  useEffect(() => {\n    if (testStarted && audioURL) {\n      const user_responses = updateUserResponses(\n        audioCurrentSection.id,\n        audioURL\n      );\n      setAudioCurrentSection(currentSection);\n    }\n  }, [audioURL]);\n\n  useEffect(() => {\n    let interval;\n\n    if (isRunning) {\n      interval = setInterval(() => {\n        setElapsedTime((prevTime) => prevTime + 1);\n      }, 1000);\n\n      setIntervalId(interval);\n    } else if (!isRunning && intervalId) {\n      clearInterval(intervalId);\n    }\n\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [isRunning]);\n\n  useEffect(() => {\n    setElapsedTime(0);\n  }, [currentQuestion]);\n\n  useEffect(() => {\n    if (mediaRecorder) {\n      const audioContext = new AudioContext();\n      const analyser = audioContext.createAnalyser();\n      const dataArray = new Uint8Array(analyser.frequencyBinCount);\n\n      navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n        const source = audioContext.createMediaStreamSource(stream);\n        source.connect(analyser);\n\n        const checkAudio = () => {\n          analyser.getByteFrequencyData(dataArray);\n          const volume = dataArray.reduce((a, b) => a + b) / dataArray.length;\n\n          if (volume > 15) {\n            setIsSpeaking(true);\n          } else {\n            setIsSpeaking(false);\n          }\n          requestAnimationFrame(checkAudio);\n        };\n        checkAudio();\n      });\n    }\n  }, [mediaRecorder]);\n\n  const startTest = () => {\n    setMicAccessError(null); // Reset the error message before starting the test\n    startRecording();\n  };\n\n  const startRecording = () => {\n    console.log(\"Running startRecording\");\n    navigator.mediaDevices\n      .getUserMedia({ audio: true })\n      .then((stream) => {\n        setIsTestStarted(true); // Flag to indicate the test has started\n        const newMediaRecorder = new MediaRecorder(stream);\n        setMediaRecorder(newMediaRecorder);\n\n        newMediaRecorder.ondataavailable = (event) => {\n          if (event.data.size > 0) {\n            const audioBlob = new Blob([event.data], { type: \"audio/wav\" });\n            const _audio_url = URL.createObjectURL(audioBlob);\n            setAudioURL(_audio_url);\n          }\n        };\n\n        newMediaRecorder.start();\n        setIsRunning(true);\n      })\n      .catch((err) => {\n        console.error(\"Could not get media:\", err);\n        setMicAccessError(\n          \"Unable to access microphone. Please allow microphone access to start the test.\"\n        );\n      });\n  };\n\n  const pauseRecording = () => {\n    if (mediaRecorder && mediaRecorder.state === \"recording\") {\n      mediaRecorder.pause();\n      setIsRunning(false);\n      setIsPaused(true);\n    }\n  };\n\n  const resumeRecording = () => {\n    if (mediaRecorder && mediaRecorder.state === \"paused\") {\n      mediaRecorder.resume();\n      setIsRunning(true);\n      setIsPaused(false);\n    }\n  };\n\n  const stopRecording = () => {\n    console.log(\"Running stopRecording\");\n    if (mediaRecorder) {\n      mediaRecorder.stop(); // First, stop the MediaRecorder\n      mediaRecorder.stream.getTracks().forEach((track) => track.stop()); // Then stop each track\n      setMediaRecorder(null); // Reset the MediaRecorder\n    }\n  };\n\n  // function updateAudioTimeStampForQuestion -> Save audio timestamp for each question.\n  // function handleNextSection -> Save audio for entire section.\n\n  function updateUserResponses(audioSection = null, audioBlobUrl = null) {\n    // Check that currentSection and currentQuestion are not null or undefined\n    if (\n      currentSection &&\n      currentQuestion &&\n      currentSection.id &&\n      currentQuestion.id\n    ) {\n      // Create a deep copy of the current userAllResponse state\n      const newUserAllResponse = userAllResponse\n        ? JSON.parse(JSON.stringify(userAllResponse))\n        : {};\n\n      // Check and create keys if they don't exist\n      if (!newUserAllResponse[currentSection.id]) {\n        newUserAllResponse[currentSection.id] = {};\n      }\n\n      if (!newUserAllResponse[currentSection.id][currentQuestion.id]) {\n        newUserAllResponse[currentSection.id][currentQuestion.id] = {};\n      }\n\n      // Update the elapsedTime for the current question in the current section\n      newUserAllResponse[currentSection.id][currentQuestion.id][\"elapsedTime\"] =\n        elapsedTime;\n\n      if (audioBlobUrl) {\n        newUserAllResponse[\"fullAudio\"] = audioBlobUrl;\n      }\n\n      setUserAllResponse(newUserAllResponse);\n\n      return newUserAllResponse;\n    } else {\n      console.error(\n        \"Either currentSection, currentQuestion or their IDs are null or not set.\"\n      );\n    }\n  }\n\n  function handleNextQuestion() {\n    console.log(\"Running handleNextQuestion\");\n    // Find the index of the current question in the current section\n    const user_responses = updateUserResponses();\n\n    const currentQuestionIndex = currentSection.questions.findIndex(\n      (q) => q === currentQuestion\n    );\n\n    // If the current question is found and not the last question in the section\n    if (\n      currentQuestionIndex !== -1 &&\n      currentQuestionIndex < currentSection.questions.length - 1\n    ) {\n      const nextQuestion = currentSection.questions[currentQuestionIndex + 1];\n      setCurrentQuestion(nextQuestion);\n    }\n    // If it's the last question in the current section\n    else if (currentQuestionIndex === currentSection.questions.length - 1) {\n      // Find the index of the current section in the module\n      const currentSectionIndex = module.sections.findIndex(\n        (sec) => sec === currentSection\n      );\n\n      // If the current section is found and not the last section in the module\n      if (\n        currentSectionIndex !== -1 &&\n        currentSectionIndex < module.sections.length - 1\n      ) {\n        const nextSection = module.sections[currentSectionIndex + 1];\n        setCurrentSection(nextSection);\n\n        // Optionally, set the question to the first one in the new section\n        setCurrentQuestion(nextSection.questions[0]);\n      }\n      // If it's the last section\n      else if (currentSectionIndex === module.sections.length - 1) {\n        // Set isEndTest to true\n        setIsEndTest(true);\n        stopRecording();\n      }\n    } else {\n      console.log(\"Question not found or already at the end.\");\n    }\n  }\n\n  function secondsToMinutes(seconds) {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds < 10 ? \"0\" : \"\"}${remainingSeconds}`;\n  }\n\n  return (\n    <div\n      className=\" border-top bg-white\"\n      style={{ position: \"fixed\", bottom: 0, width: \"100%\" }}\n    >\n      <ProgressBar\n        now={progress}\n        className=\"mb-2 rounded-0\"\n        style={{ height: \"5px\" }}\n      />\n      <Container className=\"\">\n        <Row className=\"mt-2 text-black justify-content-center \">\n          <Col sm={8} className=\"\">\n            <div className=\"mt-2  text-center\">\n              {isPaused ? (\n                timeToThink > 0 ? (\n                  <p\n                    className=\"text-dark fw-bold m-0\"\n                    style={{ fontSize: \"1.4rem\" }}\n                  >\n                    {timeToThink} secs\n                  </p>\n                ) : (\n                  <div className=\"text-danger\">On pause</div>\n                )\n              ) : (\n                <>\n                  <div>\n                    <Badge\n                      bg=\"dark\"\n                      className=\"\"\n                      style={{ fontSize: \"20px\", width: \"125px\" }}\n                    >\n                      <Stack direction=\"horizontal\" className=\"\">\n                        <div className=\"mx-2\">\n                          <Waves isSpeaking={isSpeaking} background=\"dark\" />\n                        </div>\n                        <div className=\"mx-2\">\n                          {secondsToMinutes(elapsedTime)}\n                        </div>\n                      </Stack>\n                    </Badge>\n                  </div>\n                  {questionInstruction && (\n                    <>\n                      <hr />\n                      <p className=\"m-0 p-0\">{questionInstruction}</p>\n                    </>\n                  )}\n                </>\n              )}\n            </div>\n          </Col>\n        </Row>\n      </Container>\n      <hr></hr>\n      <Container>\n        <Row className=\"my-2 mb-3 text-black justify-content-center \">\n          <Col sm={8}>\n            <Row className=\"\">\n              {!testStarted ? (\n                <Col className={`col-${testStarted ? 6 : 12} mt-1`}>\n                  <Button\n                    onClick={startTest}\n                    className={`w-100 ${deviceType === \"desktop\" && \"btn-lg\"}`}\n                  >\n                    <MdMic size={23} /> Start Test\n                  </Button>\n                </Col>\n              ) : isPaused ? (\n                timeToThink > 0 ? (\n                  <Col className={`col-12 mt-1 text-center`}>\n                    <p\n                      className=\"text-dark  m-0\"\n                      style={{ fontSize: \"1.4rem\" }}\n                    >\n                      Time to think\n                    </p>\n                  </Col>\n                ) : (\n                  <Col className={`col-12 mt-1`}>\n                    <Button\n                      onClick={resumeRecording}\n                      className={`w-100 ${\n                        deviceType === \"desktop\" && \"btn-lg\"\n                      }`}\n                    >\n                      <MdMic size={23} /> Continue\n                    </Button>\n                  </Col>\n                )\n              ) : (\n                <Col className={`col-${testStarted ? 6 : 12} mt-1`}>\n                  <Button\n                    variant=\"\"\n                    onClick={pauseRecording}\n                    className={`w-100 ${\n                      deviceType === \"desktop\" && \"btn-lg\"\n                    } btn-outline-primary`}\n                  >\n                    <MdPause size={23} /> Pause\n                  </Button>\n                </Col>\n              )}\n\n              <Col className=\"col-6 mt-1\">\n                {testStarted && !isPaused && (\n                  <Button\n                    onClick={handleNextQuestion}\n                    className={`w-100 ${deviceType === \"desktop\" && \"btn-lg\"}`}\n                    disabled={!testStarted && \"disabled\"}\n                  >\n                    Next <MdKeyboardDoubleArrowRight size={23} />\n                  </Button>\n                )}\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default SpeakingFooter;\n","import React, { useState, useEffect } from \"react\";\nimport { API_URLS } from \"../../../utils/config\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport useAxios, { baseURL } from \"../../../utils/useAxios\";\nimport { MiniNavBar } from \"../../../components/ieltstest/MiniNavBar\";\nimport {\n  Container,\n  Row,\n  Col,\n  Modal,\n  Card,\n  Button,\n  Alert,\n} from \"react-bootstrap\";\nimport SpeakingFooter from \"../../../components/ieltstest/speaking/SpeakingFooter\";\nimport BookInfo from \"../../../components/ieltstest/listening/BookInfo\";\nimport SpeakingLoader from \"../../../components/ieltstest/speaking/SpeakingLoader\";\nimport parse from \"html-react-parser\";\n\nconst AttemptSpeakingModulePage = () => {\n  const [deviceType, setDeviceType] = useState(\"desktop\");\n  const { module_slug, attempt_slug } = useParams();\n  const [module, setModule] = useState(null);\n  const [currentSection, setCurrentSection] = useState(null);\n  const api = useAxios();\n  const [showTestInfoModal, setShowTestInfoModal] = useState(false);\n  const handleCloseTestInfoModal = () => setShowTestInfoModal(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [userAllResponse, setUserAllResponse] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [isEndTest, setIsEndTest] = useState(null);\n  const [showLoader, setShowLoader] = useState(false);\n  const [showSubmitModal, setShowSubmitModal] = useState(false);\n  const handleShowSubmitModal = () => setShowSubmitModal(true);\n  const handleClosSubmiteModal = () => setShowSubmitModal(false);\n  const navigate = useNavigate();\n  const [testStarted, setIsTestStarted] = useState(false);\n  const [micAccessError, setMicAccessError] = useState(null);\n\n  // Effects\n\n  useEffect(() => {\n    getModule();\n  }, []);\n\n  useEffect(() => {\n    if (module) {\n      console.log(\"isEndTest\", isEndTest);\n      if (isEndTest) {\n        if (userAllResponse[\"fullAudio\"]) {\n          handleConfirmEndTest(userAllResponse);\n        }\n      } else {\n        console.log(\"Full Audio Not Available\");\n      }\n    }\n  }, [isEndTest, userAllResponse]);\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth < 768) {\n        setDeviceType(\"mobile\");\n      } else {\n        setDeviceType(\"desktop\");\n      }\n    };\n\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  // Functions\n  async function getModule() {\n    const response = await api.post(\n      API_URLS.getSpeakingModule + module_slug + \"/\"\n    );\n    if (response.status === 200) {\n      setModule(response.data);\n      const current_section = response.data.sections[0];\n      setCurrentSection(current_section);\n      setCurrentQuestion(current_section.questions[0]);\n    }\n  }\n\n  function updateCurrentSection(id) {\n    const newSection = module.sections.find((section) => section.id === id);\n    setCurrentSection(newSection);\n  }\n\n  async function sendAttemptUpdate(\n    attempt_type = \"In Progress\",\n    user_responses\n  ) {\n    // Create a new FormData instance for text-based data\n    let formData = new FormData();\n\n    // Append the attempt_type\n    formData.append(\"attempt_type\", attempt_type);\n\n    // Loop through user_responses\n    for (const key in user_responses) {\n      if (key === \"fullAudio\") {\n        console.log(\"Merged Audio\", user_responses[key]);\n        const audioBuffer = user_responses[key];\n        const blob = new Blob([audioBuffer], { type: \"audio/wav\" });\n\n        formData.append(`${key}`, blob);\n      } else {\n        const response = user_responses[key];\n\n        // Loop through the rest of the keys in each response object\n        for (const nestedKey in response) {\n          if (nestedKey !== \"audio\") {\n            // Skip 'audio' as it's already added\n            formData.append(\n              `${key},${nestedKey}`,\n              JSON.stringify(response[nestedKey])\n            );\n          }\n        }\n      }\n    }\n\n    try {\n      const response = await api.post(\n        `/ieltstest/update_attempt/speaking/${attempt_slug}/`,\n        formData\n      );\n\n      if (response.status === 200) {\n        console.log(\"Attempt updated successfully\");\n        return true; // Indicate success\n      } else {\n        console.log(\"Failed to update attempt\", response);\n        return false; // Indicate failure\n      }\n    } catch (error) {\n      console.error(\"There was an error sending the request\", error);\n      return false; // Indicate failure\n    }\n  }\n  async function blobToBytes(blob) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        resolve(reader.result);\n      };\n      reader.onerror = reject;\n      reader.readAsArrayBuffer(blob);\n    });\n  }\n\n  async function replaceAudioBlobWithBytes(user_responses) {\n    console.log(\"Inside replace audio\");\n\n    for (const key in user_responses) {\n      if (key === \"fullAudio\") {\n        const audioBlobUrl = user_responses[key];\n\n        const blob = await fetch(audioBlobUrl).then((r) => r.blob());\n\n        const audioBytes = await blobToBytes(blob);\n        // This will replace the \"audio\" key with the new value, while keeping the rest of the properties the same.\n        user_responses = {\n          ...user_responses,\n          fullAudio: audioBytes,\n        };\n      }\n    }\n\n    return user_responses;\n  }\n\n  async function handleConfirmEndTest(user_responses) {\n    console.log(\"Handle Confirm End Test\");\n    setShowLoader(true);\n\n    const updatedUserResponses = await replaceAudioBlobWithBytes(\n      user_responses\n    );\n\n    const isUpdateSuccessful = await sendAttemptUpdate(\n      \"Completed\",\n      updatedUserResponses\n    );\n\n    console.log(\"isUpdateSuccessful\", isUpdateSuccessful);\n    if (isUpdateSuccessful) {\n      window.location.href = `/ieltstest/attempt/speaking/${module_slug}/${attempt_slug}/completed`;\n    } else {\n      console.error(\"Failed to update the attempt\");\n      // Handle the error appropriately, perhaps show an error message to the user\n    }\n\n    handleClosSubmiteModal();\n  }\n\n  // CSS\n  const containerStyle = {\n    paddingTop: \"50px\",\n    paddingBottom: \"50px\",\n    height: \"calc(100vh - 50px)\", // Assuming 50px for NavBar and 50px for Footer\n    overflow: \"auto\", // Prevent scrollbars on the main layout\n  };\n\n  useEffect(() => {\n    document.title = \"Speaking Test | KeenIELTS\";\n  }, []);\n\n  if (!module) {\n    return null;\n  }\n\n  if (showLoader) {\n    return <SpeakingLoader />;\n  }\n\n  return (\n    <>\n      <script src=\"https://unpkg.com/audiobuffer-to-wav\"></script>\n\n      <MiniNavBar\n        module={module}\n        currentSection={currentSection}\n        updateCurrentSection={updateCurrentSection}\n        setShowTestInfoModal={setShowTestInfoModal}\n        showSectionList={false}\n      />\n\n      <Container style={containerStyle} className=\"hide-scrollbar\">\n        <Row\n          style={{ height: \"80%\" }}\n          className=\"d-flex align-items-center justify-content-center\"\n        >\n          {testStarted ? (\n            <Col sm={8}>\n              <div style={{ width: \"100%\" }}>\n                <Card className=\"my-3\">\n                  <Card.Header>\n                    <span className=\"text-black fw-bold\">\n                      {currentSection.section} :{\" \"}\n                      {currentSection.question_type.name}\n                    </span>\n                  </Card.Header>\n                  <Card.Body>\n                    <p className=\"fw-bold\" style={{ fontSize: \"1.4rem\" }}>\n                      {currentQuestion.question}\n                    </p>\n                    {currentQuestion.help_text && (\n                      <p>{parse(currentQuestion.help_text)}</p>\n                    )}\n                  </Card.Body>\n                </Card>\n              </div>\n            </Col>\n          ) : micAccessError ? (\n            <Col sm={8}>\n              <div style={{ width: \"100%\" }}>\n                <Card className=\"my-3\">\n                  <Card.Header>\n                    <span className=\"text-black fw-bold\">\n                      Microphone Access Needed\n                    </span>\n                  </Card.Header>\n                  <Card.Body>\n                    <p className=\"fw-bold\" style={{ fontSize: \"16px\" }}>\n                      We noticed an issue accessing your microphone. For the\n                      speaking test, please ensure microphone access is granted.\n                    </p>\n                    <p className=\"\" style={{ fontSize: \"16px\" }}>\n                      <ul>\n                        <li>\n                          Check your browser's permissions and confirm that your\n                          microphone is not in use by another application.\n                        </li>\n                        <li>\n                          Click on the 'Start Test' button again. When prompted,\n                          select to allow microphone access.\n                        </li>\n                        <li>\n                          If the issue persists, consider restarting your\n                          browser or switching to a different one.\n                        </li>\n                        <li>\n                          Your progress and success in the speaking test matter\n                          to us. We're here to help every step of the way!\n                        </li>\n                      </ul>\n                    </p>\n                  </Card.Body>\n                </Card>\n              </div>\n            </Col>\n          ) : (\n            <Col sm={8}>\n              <div style={{ width: \"100%\" }}>\n                <Card className=\"my-3\">\n                  <Card.Header>\n                    <h3 className=\"text-black fw-bold mt-2\">\n                      Ready to Begin Your Speaking Test?\n                    </h3>\n                  </Card.Header>\n                  <Card.Body>\n                    <p className=\"\" style={{ fontSize: \"16px\" }}>\n                      <ul>\n                        <li>\n                          Get set for a quick and engaging speaking test,\n                          lasting just 15-20 minutes.\n                        </li>\n                        <li>\n                          We're excited to hear you! But first, we'll need your\n                          permission to access your microphone. Don't worry, a\n                          prompt will appear when you hit \"Start Test.\"\n                        </li>\n                        <li>\n                          Feeling prepared? Great! Simply click \"Start Test\"\n                          when you're all set to go.\n                        </li>\n                      </ul>\n                    </p>\n                  </Card.Body>\n                </Card>\n              </div>\n            </Col>\n          )}\n        </Row>\n      </Container>\n\n      <SpeakingFooter\n        deviceType={deviceType}\n        isSpeaking={isSpeaking}\n        setIsSpeaking={setIsSpeaking}\n        currentQuestion={currentQuestion}\n        setCurrentQuestion={setCurrentQuestion}\n        currentSection={currentSection}\n        setCurrentSection={setCurrentSection}\n        setIsEndTest={setIsEndTest}\n        module={module}\n        userAllResponse={userAllResponse}\n        setUserAllResponse={setUserAllResponse}\n        handleConfirmEndTest={handleConfirmEndTest}\n        testStarted={testStarted}\n        setIsTestStarted={setIsTestStarted}\n        setMicAccessError={setMicAccessError}\n      />\n\n      <Modal\n        show={showTestInfoModal}\n        onHide={handleCloseTestInfoModal}\n        centered\n        className=\"p-0\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Test Info</Modal.Title>\n        </Modal.Header>\n        <Modal.Body className=\"p-0\">\n          <BookInfo module={module} attempt_slug={attempt_slug} />\n        </Modal.Body>\n        <div className=\"modal-footer py-2\">\n          <button\n            type=\"button\"\n            className=\"btn btn-outline-primary\"\n            onClick={handleCloseTestInfoModal}\n          >\n            Close\n          </button>\n        </div>\n      </Modal>\n\n      <Modal show={showSubmitModal} onHide={handleClosSubmiteModal} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>End Test</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Are you sure you want to end the test?</Modal.Body>\n        <Modal.Footer className=\"p-2\">\n          <Button variant=\"outline-primary\" onClick={handleClosSubmiteModal}>\n            No\n          </Button>\n          <Button variant=\"primary\" onClick={handleConfirmEndTest}>\n            Yes, end test\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default AttemptSpeakingModulePage;\n"],"names":["ROUND_PRECISION","getPercentage","now","min","max","percentage","renderProgressBar","label","visuallyHidden","striped","animated","className","style","variant","bsPrefix","props","ref","_jsx","classNames","ProgressBar","React.forwardRef","isChild","rest","useBootstrapPrefix","children","wrapperProps","map","child","cloneElement","ProgressBar$1","Waves","isSpeaking","background","jsx","jsxs","SpeakingFooter","deviceType","setIsSpeaking","currentQuestion","setCurrentQuestion","currentSection","setCurrentSection","setIsEndTest","module","userAllResponse","setUserAllResponse","handleConfirmEndTest","testStarted","setIsTestStarted","setMicAccessError","audioURL","setAudioURL","useState","mediaRecorder","setMediaRecorder","isPaused","setIsPaused","elapsedTime","setElapsedTime","isRunning","setIsRunning","intervalId","setIntervalId","progress","setProgress","totalQuestions","setTotalQuestions","audioCurrentSection","setAudioCurrentSection","timeToThink","setTimeToThink","questionInstruction","setQuestionInstruction","useEffect","timerId","pauseRecording","prevTime","resumeRecording","count","section","completedQuestions","i","updateUserResponses","interval","audioContext","analyser","dataArray","stream","checkAudio","a","b","startTest","startRecording","newMediaRecorder","event","audioBlob","_audio_url","err","stopRecording","track","audioSection","audioBlobUrl","newUserAllResponse","handleNextQuestion","currentQuestionIndex","q","nextQuestion","currentSectionIndex","sec","nextSection","secondsToMinutes","seconds","minutes","remainingSeconds","Container","Row","Col","Fragment","Badge","Stack","Button","MdMic","MdPause","MdKeyboardDoubleArrowRight","AttemptSpeakingModulePage","setDeviceType","module_slug","attempt_slug","useParams","setModule","api","useAxios","showTestInfoModal","setShowTestInfoModal","handleCloseTestInfoModal","isEndTest","showLoader","setShowLoader","showSubmitModal","setShowSubmitModal","handleClosSubmiteModal","useNavigate","micAccessError","getModule","handleResize","response","API_URLS","current_section","updateCurrentSection","id","newSection","sendAttemptUpdate","attempt_type","user_responses","formData","key","audioBuffer","blob","nestedKey","error","blobToBytes","resolve","reject","reader","replaceAudioBlobWithBytes","r","audioBytes","updatedUserResponses","isUpdateSuccessful","containerStyle","SpeakingLoader","MiniNavBar","Card","parse","Modal","BookInfo"],"mappings":"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","x_google_ignoreList":[0]}