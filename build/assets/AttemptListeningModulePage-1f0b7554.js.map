{"version":3,"file":"AttemptListeningModulePage-1f0b7554.js","sources":["../../src/utils/useScrollDirection.js","../../src/pages/ieltstest/listening/AttemptListeningModulePage.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useScrollDirection = () => {\n  // Initialize state with undefined to make it nullable\n  const [scrollDirection, setScrollDirection] = useState();\n\n  useEffect(() => {\n    // Store the previous scroll position\n    let previousScrollPosition = window.pageYOffset;\n\n    const handleScroll = () => {\n      // Get the new scroll position\n      const currentScrollPosition = window.pageYOffset;\n\n      // Determine scroll direction\n      const direction =\n        currentScrollPosition > previousScrollPosition ? \"down\" : \"up\";\n\n      // Update the scroll direction state\n      setScrollDirection(direction);\n\n      // Update the previous scroll position for the next comparison\n      previousScrollPosition = currentScrollPosition;\n    };\n\n    // Listen to the scroll event\n    window.addEventListener(\"scroll\", handleScroll);\n\n    // Cleanup function to remove the listener when the component unmounts\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []); // Empty dependency array means the effect runs once on mount and clean up on unmount\n\n  return scrollDirection;\n};\n\nexport default useScrollDirection;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { useNavigate, useParams } from \"react-router\";\nimport useAxios from \"../../../utils/useAxios\";\nimport { Modal, Stack } from \"react-bootstrap\";\nimport {\n  Row,\n  Col,\n  Container,\n  Card,\n  Badge,\n  Button,\n  Accordion,\n  Table,\n} from \"react-bootstrap\";\n\nimport ListeningSection from \"../../../components/ieltstest/listening/ListeningSection\";\nimport useScrollDirection from \"../../../utils/useScrollDirection\";\nimport CountdownTimer from \"../../../components/elements/CountdownTimer\";\nimport BookInfo from \"../../../components/ieltstest/listening/BookInfo\";\nimport CustomAudioPlayer from \"../../../components/elements/audioplayer/CustomAudioPlayer\";\nimport { API_URLS } from \"../../../utils/config\";\nimport { FiCheckCircle } from \"react-icons/fi\";\nimport { getFormData } from \"../../../utils/moduleUtils\";\nimport QuestionPallete from \"../../../components/ieltstest/QuestionPallete\";\n\nconst AttemptListeningModulePage = () => {\n  const { module_slug, attempt_slug } = useParams();\n  const api = useAxios();\n  const [module, setModule] = useState(null);\n  const [currentSection, setCurrentSection] = useState(null);\n  const scrollDirection = useScrollDirection();\n  const formRef = useRef(null);\n  const [currentFormData, setCurrentFormData] = useState({});\n  const navigate = useNavigate();\n  const [showModal, setShowModal] = useState(false);\n  const handleShowModal = () => setShowModal(true);\n  const handleCloseModal = () => setShowModal(false);\n  const [currentAudioTime, setCurrentAudioTime] = useState(null);\n  const [testStarted, setTestStarted] = useState(false);\n\n  useEffect(() => {\n    getModule();\n  }, [setModule]);\n\n  useEffect(() => {\n    if (currentSection !== null) {\n      setCurrentAudioTime(currentSection.audio_start_time);\n    }\n  }, [currentSection]);\n\n  async function getModule() {\n    const response = await api.post(\n      API_URLS.getListeningModule + module_slug + \"/\"\n    );\n    if (response.status === 200) {\n      setModule(response.data);\n      setCurrentSection(response.data.sections[0]);\n    }\n  }\n\n  const [questionData, setQuestionData] = useState({\n    completed_questions: 0,\n    total_questions: 0,\n  });\n  // Log form data every 5 seconds\n\n  function sendAttemptUpdate(attempt_type = \"In Progress\") {\n    const data = {\n      answers: currentFormData,\n      attempt_type: attempt_type,\n    };\n\n    return api.post(\n      \"/ieltstest/update_attempt/listening/\" + attempt_slug + \"/\",\n      data\n    );\n  }\n\n  function scrollToElement(elementId) {\n    const element = document.getElementById(elementId);\n    if (element) {\n      // Get the element's position\n      const rect = element.getBoundingClientRect();\n\n      // Scroll to the element, minus some offset for spacing\n      window.scrollTo({\n        top: rect.top + window.pageYOffset - 200,\n        behavior: \"smooth\",\n      });\n    }\n  }\n\n  useEffect(() => {\n    getFormDataLocal();\n  }, [module]);\n\n  function getFormDataLocal() {\n    return getFormData(formRef, module, setCurrentFormData, setQuestionData);\n  }\n  const handleChange = (event) => {\n    const formData = getFormDataLocal();\n  };\n\n  function endTest() {\n    handleShowModal();\n  }\n\n  function handleConfirmEndTest() {\n    getFormDataLocal();\n    sendAttemptUpdate(\"Completed\")\n      .then((response) => {\n        if (response.status === 200) {\n          console.log(\"Attempt Updated\");\n          navigate(\n            `/ieltstest/attempt/listening/${module_slug}/${attempt_slug}/get_result`\n          );\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error updating attempt: \", error);\n      });\n    handleCloseModal();\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    endTest();\n  };\n\n  useEffect(() => {\n    document.title = \"Listening Test | KeenIELTS\";\n  }, []);\n\n  if (!module) {\n    return null;\n  }\n\n  return (\n    <>\n      <Modal show={showModal} onHide={handleCloseModal} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>End Test</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Are you sure you want to end the test?</Modal.Body>\n        <Modal.Footer className=\"p-2\">\n          <Button variant=\"outline-primary\" onClick={handleCloseModal}>\n            No\n          </Button>\n          <Button variant=\"primary\" onClick={handleConfirmEndTest}>\n            Yes, end test\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      <form onSubmit={handleSubmit} ref={formRef}>\n        {testStarted ? (\n          <>\n            <Row\n              className={`${\n                scrollDirection === \"up\" ? \"sticky-top\" : \"\"\n              } mx-0 border-top border-bottom`}\n            >\n              <Col sm={12} className=\"p-0 bg-white\">\n                <Container>\n                  <CustomAudioPlayer\n                    src={module.audio}\n                    start_time={currentAudioTime}\n                    auto_play={true}\n                  />\n                </Container>\n              </Col>\n              <Col sm={12} className=\"bg-white border-top p-0\">\n                <Container>\n                  <Stack direction=\"horizontal\">\n                    <div>\n                      <span className=\"text-black\" style={{ fontSize: \"20px\" }}>\n                        {\" \"}\n                        <FiCheckCircle /> {questionData.completed_questions}/\n                        {questionData.total_questions}\n                      </span>\n                    </div>\n                    <div className=\"ms-auto\">\n                      <CountdownTimer\n                        initialMinutes={40}\n                        initialSeconds={0}\n                        handleTimesUp={handleConfirmEndTest}\n                        startTimer={testStarted}\n                      />\n                    </div>\n                  </Stack>\n                </Container>\n              </Col>\n            </Row>\n\n            <Container className=\"my-3\">\n              <Row>\n                <Col sm={12} md={8}>\n                  <Row>\n                    <Col sm={12} className=\"my-3\">\n                      <Accordion>\n                        <Accordion.Item eventKey=\"0\">\n                          <Accordion.Header>\n                            <span className=\"text-black fw-bold\">\n                              {module.test.book.name}\n                            </span>\n                          </Accordion.Header>\n                          <Accordion.Body>\n                            <BookInfo\n                              module={module}\n                              attempt_slug={attempt_slug}\n                            />\n                          </Accordion.Body>\n                        </Accordion.Item>\n                      </Accordion>\n                    </Col>\n                    <Col sm={12}>\n                      <Row>\n                        {module.sections.length > 0 &&\n                          module.sections.map((section) => (\n                            <div key={section.id} className=\"my-2\">\n                              <ListeningSection\n                                section={section}\n                                setCurrentSection={setCurrentSection}\n                                handleChange={handleChange}\n                              />\n                            </div>\n                          ))}\n                      </Row>\n                    </Col>\n                  </Row>\n                </Col>\n\n                <Col sm={12} md={4} className=\"\">\n                  <Row className=\"sticky-top\" style={{ zIndex: 10 }}>\n                    <Col sm={12} className=\"my-3\">\n                      <Accordion>\n                        <Accordion.Item eventKey=\"0\">\n                          <Accordion.Header>\n                            <span className=\"text-black fw-bold\">\n                              Review Answers\n                            </span>\n                          </Accordion.Header>\n                          <Accordion.Body className=\"p-0 m-0\">\n                            <Table striped bordered>\n                              <thead>\n                                <tr>\n                                  <th scope=\"col\">#</th>\n                                  <th scope=\"col\">Your Answer</th>\n                                </tr>\n                              </thead>\n                              <tbody>\n                                {Object.entries(currentFormData).map(\n                                  (item, index) => (\n                                    <tr key={index}>\n                                      <td className=\"fw-bold\">{index + 1}</td>\n                                      <td className=\"text-black\">{item[1]}</td>\n                                    </tr>\n                                  )\n                                )}\n                              </tbody>\n                            </Table>\n                          </Accordion.Body>\n                        </Accordion.Item>\n                      </Accordion>\n                    </Col>\n                    <Col sm={12} className=\"mt-2\">\n                      <Card>\n                        <Card.Header>\n                          <span className=\" fw-bold text-black\">\n                            Question Pallete\n                          </span>\n                        </Card.Header>\n                        <Card.Body>\n                          <QuestionPallete\n                            module={module}\n                            currentFormData={currentFormData}\n                          />\n                        </Card.Body>\n\n                        <Card.Footer>\n                          <Button type=\"submit\">Submit Answers</Button>\n                        </Card.Footer>\n                      </Card>\n                    </Col>\n                  </Row>\n                </Col>\n              </Row>\n            </Container>\n          </>\n        ) : (\n          <Container className=\"my-3\">\n            <Row className=\"justify-content-center\">\n              <Col sm={8}>\n                <Card>\n                  <Card.Header className=\"text-black \">\n                    <h3 className=\"m-0 fw-bold\">\n                      Begin Your Listening Section\n                    </h3>\n                  </Card.Header>\n                  <Card.Body className=\"\">\n                    <p className=\"fw-bold\" style={{ fontSize: \"16px\" }}>\n                      Welcome to the Listening Section of your test. Here, your\n                      understanding of spoken English will be assessed.\n                    </p>\n                    <p style={{ fontSize: \"16px\" }}>\n                      <ul>\n                        <li>\n                          Please ensure your speakers or headphones are properly\n                          connected and set to a comfortable volume level.\n                        </li>\n                        <li>\n                          When you're ready, press the 'Start Test' button to\n                          start the listening test. The audio will play only\n                          once, so please listen carefully.\n                        </li>\n                        <li>\n                          Remember, take notes if needed and focus on the key\n                          details in the conversation or speech.\n                        </li>\n                        <li>\n                          Feel free to begin when you're fully prepared. We wish\n                          you the best in this part of your language journey!\n                        </li>\n                      </ul>\n                    </p>\n                  </Card.Body>\n                  <Card.Footer>\n                    <Button\n                      onClick={() => {\n                        setCurrentAudioTime(0.0);\n                        setTestStarted(true);\n                      }}\n                    >\n                      Start Test\n                    </Button>\n                  </Card.Footer>\n                </Card>\n              </Col>\n            </Row>\n          </Container>\n        )}\n      </form>\n    </>\n  );\n};\n\nexport default AttemptListeningModulePage;\n"],"names":["useScrollDirection","scrollDirection","setScrollDirection","useState","useEffect","previousScrollPosition","handleScroll","currentScrollPosition","direction","AttemptListeningModulePage","module_slug","attempt_slug","useParams","api","useAxios","module","setModule","currentSection","setCurrentSection","formRef","useRef","currentFormData","setCurrentFormData","navigate","useNavigate","showModal","setShowModal","handleShowModal","handleCloseModal","currentAudioTime","setCurrentAudioTime","testStarted","setTestStarted","getModule","response","API_URLS","questionData","setQuestionData","sendAttemptUpdate","attempt_type","data","getFormDataLocal","getFormData","handleChange","event","endTest","handleConfirmEndTest","error","handleSubmit","jsxs","Fragment","Modal","jsx","Button","Row","Col","Container","CustomAudioPlayer","Stack","FiCheckCircle","CountdownTimer","Accordion","BookInfo","section","ListeningSection","Table","item","index","Card","QuestionPallete"],"mappings":"yhBAEA,MAAMA,EAAqB,IAAM,CAE/B,KAAM,CAACC,EAAiBC,CAAkB,EAAIC,EAAQ,SAAA,EAEtDC,OAAAA,EAAAA,UAAU,IAAM,CAEd,IAAIC,EAAyB,OAAO,YAEpC,MAAMC,EAAe,IAAM,CAEzB,MAAMC,EAAwB,OAAO,YAG/BC,EACJD,EAAwBF,EAAyB,OAAS,KAG5DH,EAAmBM,CAAS,EAG5BH,EAAyBE,CAC/B,EAGI,cAAO,iBAAiB,SAAUD,CAAY,EAGvC,IAAM,OAAO,oBAAoB,SAAUA,CAAY,CAC/D,EAAE,CAAE,CAAA,EAEEL,CACT,ECRMQ,GAA6B,IAAM,CACvC,KAAM,CAAE,YAAAC,EAAa,aAAAC,CAAa,EAAIC,EAAU,EAC1CC,EAAMC,IACN,CAACC,EAAQC,CAAS,EAAIb,WAAS,IAAI,EACnC,CAACc,EAAgBC,CAAiB,EAAIf,WAAS,IAAI,EACnDF,EAAkBD,IAClBmB,EAAUC,SAAO,IAAI,EACrB,CAACC,EAAiBC,CAAkB,EAAInB,EAAA,SAAS,CAAE,CAAA,EACnDoB,EAAWC,IACX,CAACC,EAAWC,CAAY,EAAIvB,WAAS,EAAK,EAC1CwB,EAAkB,IAAMD,EAAa,EAAI,EACzCE,EAAmB,IAAMF,EAAa,EAAK,EAC3C,CAACG,EAAkBC,CAAmB,EAAI3B,WAAS,IAAI,EACvD,CAAC4B,EAAaC,CAAc,EAAI7B,WAAS,EAAK,EAEpDC,EAAAA,UAAU,IAAM,CACJ6B,GAAA,EACT,CAACjB,CAAS,CAAC,EAEdZ,EAAAA,UAAU,IAAM,CACVa,IAAmB,MACrBa,EAAoBb,EAAe,gBAAgB,CACrD,EACC,CAACA,CAAc,CAAC,EAEnB,eAAegB,GAAY,CACnB,MAAAC,EAAW,MAAMrB,EAAI,KACzBsB,EAAS,mBAAqBzB,EAAc,GAAA,EAE1CwB,EAAS,SAAW,MACtBlB,EAAUkB,EAAS,IAAI,EACvBhB,EAAkBgB,EAAS,KAAK,SAAS,CAAC,CAAC,EAE/C,CAEA,KAAM,CAACE,EAAcC,CAAe,EAAIlC,WAAS,CAC/C,oBAAqB,EACrB,gBAAiB,CAAA,CAClB,EAGQ,SAAAmC,EAAkBC,EAAe,cAAe,CACvD,MAAMC,EAAO,CACX,QAASnB,EACT,aAAAkB,CAAA,EAGF,OAAO1B,EAAI,KACT,uCAAyCF,EAAe,IACxD6B,CAAA,CAEJ,CAgBApC,EAAAA,UAAU,IAAM,CACGqC,GAAA,EAChB,CAAC1B,CAAM,CAAC,EAEX,SAAS0B,GAAmB,CAC1B,OAAOC,EAAYvB,EAASJ,EAAQO,EAAoBe,CAAe,CACzE,CACM,MAAAM,EAAgBC,GAAU,CACbH,EAAiB,CAAA,EAGpC,SAASI,GAAU,CACDlB,GAClB,CAEA,SAASmB,GAAuB,CACbL,IACjBH,EAAkB,WAAW,EAC1B,KAAMJ,GAAa,CACdA,EAAS,SAAW,MACtB,QAAQ,IAAI,iBAAiB,EAC7BX,EACE,gCAAgCb,CAAW,IAAIC,CAAY,aAAA,EAE/D,CACD,EACA,MAAOoC,GAAU,CACR,QAAA,MAAM,2BAA4BA,CAAK,CAAA,CAChD,EACcnB,GACnB,CAEM,MAAAoB,EAAgBJ,GAAU,CAC9BA,EAAM,eAAe,EACbC,GAAA,EAOV,OAJAzC,EAAAA,UAAU,IAAM,CACd,SAAS,MAAQ,4BACnB,EAAG,CAAE,CAAA,EAEAW,EAMDkC,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAD,OAACE,GAAM,KAAM1B,EAAW,OAAQG,EAAkB,SAAQ,GACxD,SAAA,CAACwB,EAAAA,IAAAD,EAAM,OAAN,CAAa,YAAW,GACvB,eAACA,EAAM,MAAN,CAAY,SAAA,UAAA,CAAQ,CACvB,CAAA,EACCC,EAAAA,IAAAD,EAAM,KAAN,CAAW,SAAsC,wCAAA,CAAA,EACjDF,EAAA,KAAAE,EAAM,OAAN,CAAa,UAAU,MACtB,SAAA,CAAAC,MAACC,EAAO,CAAA,QAAQ,kBAAkB,QAASzB,EAAkB,SAE7D,KAAA,QACCyB,EAAO,CAAA,QAAQ,UAAU,QAASP,EAAsB,SAEzD,gBAAA,CAAA,EACF,CAAA,EACF,QAEC,OAAK,CAAA,SAAUE,EAAc,IAAK7B,EAChC,WAEG8B,EAAAA,KAAAC,EAAA,SAAA,CAAA,SAAA,CAAAD,EAAA,KAACK,EAAA,CACC,UAAW,GACTrD,IAAoB,KAAO,aAAe,EAC5C,iCAEA,SAAA,CAAAmD,EAAAA,IAACG,GAAI,GAAI,GAAI,UAAU,eACrB,eAACC,EACC,CAAA,SAAAJ,EAAA,IAACK,EAAA,CACC,IAAK1C,EAAO,MACZ,WAAYc,EACZ,UAAW,EAAA,GAEf,CACF,CAAA,EACAuB,EAAA,IAACG,EAAI,CAAA,GAAI,GAAI,UAAU,0BACrB,SAAAH,EAAAA,IAACI,EACC,CAAA,SAAAP,OAACS,EAAM,CAAA,UAAU,aACf,SAAA,CAACN,EAAAA,IAAA,MAAA,CACC,gBAAC,OAAK,CAAA,UAAU,aAAa,MAAO,CAAE,SAAU,MAAA,EAC7C,SAAA,CAAA,UACAO,EAAc,EAAA,EAAE,IAAEvB,EAAa,oBAAoB,IACnDA,EAAa,eAAA,CAAA,CAChB,CACF,CAAA,EACAgB,EAAAA,IAAC,MAAI,CAAA,UAAU,UACb,SAAAA,EAAA,IAACQ,EAAA,CACC,eAAgB,GAChB,eAAgB,EAChB,cAAed,EACf,WAAYf,CAAA,CAAA,EAEhB,CAAA,CACF,CAAA,CACF,CAAA,EACF,CAAA,CAAA,CACF,EAECqB,MAAAI,EAAA,CAAU,UAAU,OACnB,gBAACF,EACC,CAAA,SAAA,CAAAF,EAAAA,IAACG,GAAI,GAAI,GAAI,GAAI,EACf,gBAACD,EACC,CAAA,SAAA,CAAAF,EAAA,IAACG,EAAI,CAAA,GAAI,GAAI,UAAU,OACrB,SAAAH,EAAA,IAACS,EACC,CAAA,SAAAZ,EAAAA,KAACY,EAAU,KAAV,CAAe,SAAS,IACvB,SAAA,CAACT,EAAA,IAAAS,EAAU,OAAV,CACC,SAACT,EAAAA,IAAA,OAAA,CAAK,UAAU,qBACb,SAAOrC,EAAA,KAAK,KAAK,IACpB,CAAA,EACF,EACAqC,EAAAA,IAACS,EAAU,KAAV,CACC,SAAAT,EAAA,IAACU,EAAA,CACC,OAAA/C,EACA,aAAAJ,CAAA,CAAA,EAEJ,CAAA,CACF,CAAA,CACF,CAAA,EACF,QACC4C,EAAI,CAAA,GAAI,GACP,SAACH,EAAA,IAAAE,EAAA,CACE,WAAO,SAAS,OAAS,GACxBvC,EAAO,SAAS,IAAKgD,GAClBX,MAAA,MAAA,CAAqB,UAAU,OAC9B,SAAAA,EAAA,IAACY,EAAA,CACC,QAAAD,EACA,kBAAA7C,EACA,aAAAyB,CAAA,CAJM,CAAA,EAAAoB,EAAQ,EAMlB,CACD,EACL,CACF,CAAA,CAAA,CAAA,CACF,CACF,CAAA,QAECR,EAAI,CAAA,GAAI,GAAI,GAAI,EAAG,UAAU,GAC5B,SAACN,EAAAA,KAAAK,EAAA,CAAI,UAAU,aAAa,MAAO,CAAE,OAAQ,EAC3C,EAAA,SAAA,CAAAF,EAAA,IAACG,EAAI,CAAA,GAAI,GAAI,UAAU,OACrB,SAAAH,EAAA,IAACS,EACC,CAAA,SAAAZ,EAAAA,KAACY,EAAU,KAAV,CAAe,SAAS,IACvB,SAAA,CAACT,EAAAA,IAAAS,EAAU,OAAV,CACC,SAAAT,EAAAA,IAAC,QAAK,UAAU,qBAAqB,0BAErC,CACF,CAAA,EACAA,EAAAA,IAACS,EAAU,KAAV,CAAe,UAAU,UACxB,SAAAZ,EAAA,KAACgB,EAAM,CAAA,QAAO,GAAC,SAAQ,GACrB,SAAA,CAACb,EAAA,IAAA,QAAA,CACC,gBAAC,KACC,CAAA,SAAA,CAACA,EAAA,IAAA,KAAA,CAAG,MAAM,MAAM,SAAC,IAAA,EAChBA,EAAA,IAAA,KAAA,CAAG,MAAM,MAAM,SAAW,cAAA,CAAA,CAAA,CAC7B,CACF,CAAA,EACCA,EAAA,IAAA,QAAA,CACE,SAAO,OAAA,QAAQ/B,CAAe,EAAE,IAC/B,CAAC6C,EAAMC,IACLlB,EAAA,KAAC,KACC,CAAA,SAAA,CAAAG,EAAA,IAAC,KAAG,CAAA,UAAU,UAAW,SAAAe,EAAQ,EAAE,QAClC,KAAG,CAAA,UAAU,aAAc,SAAAD,EAAK,CAAC,EAAE,CAAA,CAAA,EAF7BC,CAGT,CAAA,EAGN,CAAA,CAAA,CACF,CACF,CAAA,CAAA,CACF,CAAA,CACF,CAAA,EACF,QACCZ,EAAI,CAAA,GAAI,GAAI,UAAU,OACrB,gBAACa,EACC,CAAA,SAAA,CAAChB,EAAAA,IAAAgB,EAAK,OAAL,CACC,SAAAhB,EAAAA,IAAC,QAAK,UAAU,sBAAsB,4BAEtC,CACF,CAAA,EACAA,EAAAA,IAACgB,EAAK,KAAL,CACC,SAAAhB,EAAA,IAACiB,EAAA,CACC,OAAAtD,EACA,gBAAAM,CAAA,CAAA,EAEJ,EAEA+B,EAAAA,IAACgB,EAAK,OAAL,CACC,eAACf,EAAO,CAAA,KAAK,SAAS,SAAA,gBAAA,CAAc,CACtC,CAAA,CAAA,CAAA,CACF,CACF,CAAA,CAAA,CAAA,CACF,CACF,CAAA,CAAA,CAAA,CACF,CACF,CAAA,CAAA,EACF,EAEAD,MAACI,EAAU,CAAA,UAAU,OACnB,SAACJ,EAAAA,IAAAE,EAAA,CAAI,UAAU,yBACb,SAACF,EAAAA,IAAAG,EAAA,CAAI,GAAI,EACP,gBAACa,EACC,CAAA,SAAA,CAAChB,EAAA,IAAAgB,EAAK,OAAL,CAAY,UAAU,cACrB,eAAC,KAAG,CAAA,UAAU,cAAc,SAAA,8BAAA,CAE5B,CACF,CAAA,EACCnB,EAAA,KAAAmB,EAAK,KAAL,CAAU,UAAU,GACnB,SAAA,CAAChB,EAAAA,IAAA,IAAA,CAAE,UAAU,UAAU,MAAO,CAAE,SAAU,MAAA,EAAU,SAGpD,6GAAA,CAAA,EACAA,EAAAA,IAAC,KAAE,MAAO,CAAE,SAAU,MAAO,EAC3B,gBAAC,KACC,CAAA,SAAA,CAAAA,EAAAA,IAAC,MAAG,SAGJ,yGAAA,CAAA,EACAA,EAAAA,IAAC,MAAG,SAIJ,0IAAA,CAAA,EACAA,EAAAA,IAAC,MAAG,SAGJ,4FAAA,CAAA,EACAA,EAAAA,IAAC,MAAG,SAGJ,4GAAA,CAAA,CAAA,CAAA,CACF,CACF,CAAA,CAAA,EACF,EACAA,EAAAA,IAACgB,EAAK,OAAL,CACC,SAAAhB,EAAA,IAACC,EAAA,CACC,QAAS,IAAM,CACbvB,EAAoB,CAAG,EACvBE,EAAe,EAAI,CACrB,EACD,SAAA,YAAA,CAAA,EAGH,CACF,CAAA,CAAA,CACF,CAAA,EACF,CAAA,CACF,CAEJ,CAAA,CACF,CAAA,CAAA,EAhNO,IAkNX"}