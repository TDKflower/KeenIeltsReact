{"version":3,"file":"ParseQuestions-f1463ced.js","sources":["../../src/components/ieltstest/QuestionBadge.jsx","../../src/components/ieltstest/ParseQuestions.jsx"],"sourcesContent":["import React from \"react\";\nimport { Badge } from \"react-bootstrap\";\nimport { FiCheckCircle, FiXCircle } from \"react-icons/fi\";\n\nconst QuestionBadge = ({\n  children,\n  user_answers,\n  queName,\n  form_field,\n  moduleType,\n}) => {\n  // Added validation to ensure form_field and form_field.props are defined\n  const isFormFieldDefined = form_field && form_field.props;\n\n  // Check if the field is a radio button\n  const isRadioButton = isFormFieldDefined && form_field.props.type === \"radio\";\n\n  // Determine if the radio button is selected\n  const isRadioButtonSelected = isRadioButton && form_field.props.checked;\n\n  // Determine if the user's answer is correct or not\n  const isUserAnswerCorrect =\n    user_answers &&\n    user_answers[\"que-\" + queName[1]] &&\n    user_answers[\"que-\" + queName[1]][\"is_user_answer_correct\"];\n\n  // Conditionally render the badge or raw form field\n  if (isRadioButton && !isRadioButtonSelected) {\n    return form_field; // Return only the form field for unselected radio buttons\n  } else {\n    return (\n      <Badge\n        className=\"fw-bold p-1 m-1\"\n        style={{ fontSize: \"16px\" }}\n        bg={\n          isUserAnswerCorrect\n            ? \"success\"\n            : user_answers\n            ? \"danger\"\n            : moduleType.toLowerCase()\n        }\n      >\n        <span className=\"me-1\">{queName[1]}</span>\n        {user_answers &&\n          (isUserAnswerCorrect ? (\n            <FiCheckCircle\n              size={18}\n              style={{ marginLeft: \"5px\", marginRight: \"5px\" }}\n            />\n          ) : (\n            <FiXCircle\n              size={18}\n              style={{ marginLeft: \"5px\", marginRight: \"5px\" }}\n            />\n          ))}\n        {form_field}\n      </Badge>\n    );\n  }\n};\n\nexport default QuestionBadge;\n","import React, { useState, useEffect } from \"react\";\nimport parse from \"html-react-parser\";\nimport QuestionBadge from \"./QuestionBadge\";\n\nconst ParseQuestions = ({\n  section,\n  section_form_values,\n  user_answers,\n  handleChange,\n  moduleType = \"Listening\", // Default to 'Listening' module\n}) => {\n  const [formValues, setFormValues] = useState({});\n\n  useEffect(() => {\n    if (section_form_values) {\n      setFormValues(section_form_values);\n    }\n  }, [section_form_values]);\n\n  const handleInputChange = (event) => {\n    if (moduleType === \"Reading\") {\n      const { name, value } = event.target;\n      const key = name.split(\"-\")[1];\n      setFormValues({\n        ...formValues,\n        [\"que-\" + key]: value,\n      });\n      if (handleChange) {\n        handleChange(event);\n      }\n    }\n  };\n\n  const renderInput = (domNode, queName) => {\n    const commonProps = {\n      ...domNode.attribs,\n\n      required: false,\n      onChange: moduleType === \"Reading\" ? handleInputChange : handleChange,\n      disabled: !!user_answers,\n    };\n\n    if (domNode.name === \"input\" && domNode.attribs.type === \"radio\") {\n      return (\n        <input\n          type=\"radio\"\n          {...commonProps}\n          className={`${domNode.attribs.className || \"\"} custom-form-control`}\n          checked={\n            user_answers\n              ? user_answers[\"que-\" + queName[1]][\n                  \"user_answer\"\n                ].toUpperCase() === domNode.attribs.value.toUpperCase()\n              : moduleType === \"Reading\"\n              ? formValues[\"que-\" + queName[1]] === domNode.attribs.value\n              : undefined\n          }\n        />\n      );\n    }\n\n    if (domNode.name === \"select\") {\n      return (\n        <>\n          <select\n            {...commonProps}\n            className={`${domNode.attribs.className || \"\"} custom-form-select`}\n            value={\n              user_answers\n                ? String(\n                    user_answers[\"que-\" + queName[1]][\"user_answer\"]\n                  ).toUpperCase() // Convert to lowercase\n                : moduleType === \"Reading\"\n                ? String(formValues[\"que-\" + queName[1]]).toUpperCase() // Convert to lowercase\n                : undefined\n            }\n          >\n            {Array.from(domNode.children || []).map((optionNode, idx) => {\n              const optionValue = optionNode.children[0]\n                ? optionNode.children[0].data\n                : \"\";\n              return (\n                <option\n                  {...optionNode.attribs}\n                  key={idx}\n                  value={String(optionNode.attribs.value).toUpperCase()} // Convert to lowercase\n                >\n                  {optionValue.toUpperCase()}\n                </option>\n              );\n            })}\n          </select>\n        </>\n      );\n    }\n\n    return React.createElement(domNode.name, {\n      ...commonProps,\n      value: user_answers\n        ? user_answers[\"que-\" + queName[1]][\"user_answer\"]\n        : moduleType === \"Reading\"\n        ? formValues[\"que-\" + queName[1]]\n        : undefined,\n    });\n  };\n\n  if (!section || !section.questions) {\n    return null;\n  }\n\n  return (\n    <div className=\"parser-block\">\n      {parse(section.questions, {\n        replace: (domNode) => {\n          if (\n            domNode.name === \"input\" ||\n            domNode.name === \"textarea\" ||\n            domNode.name === \"select\"\n          ) {\n            let queName = domNode.attribs.name.split(\"-\");\n\n            return (\n              <span id={`que-${queName[1]}`} className=\"\">\n                {user_answers &&\n                  domNode.attribs.type === \"radio\" &&\n                  user_answers[\"que-\" + queName[1]][\"user_answer\"] ===\n                    domNode.attribs.value && (\n                    <QuestionBadge\n                      user_answers={user_answers}\n                      queName={queName}\n                      moduleType={moduleType}\n                    />\n                  )}\n\n                {domNode.attribs.type !== \"radio\" ? (\n                  <QuestionBadge\n                    user_answers={user_answers}\n                    queName={queName}\n                    form_field={renderInput(domNode, queName)}\n                    moduleType={moduleType}\n                  />\n                ) : (\n                  <QuestionBadge\n                    user_answers={user_answers}\n                    queName={queName}\n                    form_field={renderInput(domNode, queName)}\n                    moduleType={moduleType}\n                  />\n                )}\n              </span>\n            );\n          }\n        },\n      })}\n    </div>\n  );\n};\n\nexport default ParseQuestions;\n"],"names":["QuestionBadge","children","user_answers","queName","form_field","moduleType","isRadioButton","isRadioButtonSelected","isUserAnswerCorrect","jsxs","Badge","jsx","FiCheckCircle","FiXCircle","ParseQuestions","section","section_form_values","handleChange","formValues","setFormValues","useState","useEffect","handleInputChange","event","name","value","key","renderInput","domNode","commonProps","Fragment","optionNode","idx","optionValue","createElement","React","parse"],"mappings":"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"}