{"version":3,"file":"MiniNavBar-60e3dbb0.js","sources":["../../node_modules/react-bootstrap/esm/types.js","../../node_modules/react-bootstrap/esm/DropdownButton.js","../../src/components/ieltstest/MiniNavBar.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nconst alignDirection = PropTypes.oneOf(['start', 'end']);\nexport const alignPropType = PropTypes.oneOfType([alignDirection, PropTypes.shape({\n  sm: alignDirection\n}), PropTypes.shape({\n  md: alignDirection\n}), PropTypes.shape({\n  lg: alignDirection\n}), PropTypes.shape({\n  xl: alignDirection\n}), PropTypes.shape({\n  xxl: alignDirection\n}), PropTypes.object]);","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport DropdownToggle from './DropdownToggle';\nimport DropdownMenu from './DropdownMenu';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string}\n   */\n  id: PropTypes.string,\n  /** An `href` passed to the Toggle component */\n  href: PropTypes.string,\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n  /**\n   * Menu color variant.\n   *\n   * Omitting this will use the default light color.\n   */\n  menuVariant: PropTypes.oneOf(['dark']),\n  /**\n   * Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer to\n   * Popper.js's flip [docs](https://popper.js.org/docs/v2/modifiers/flip/).\n   *\n   */\n  flip: PropTypes.bool,\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n  /** @ignore */\n  variant: PropTypes.string,\n  /** @ignore */\n  size: PropTypes.string\n};\n\n/**\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\n * [`Dropdown`'s props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._ Only\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\n * along with menu-related props are passed to the `Dropdown.Menu`\n */\nconst DropdownButton = /*#__PURE__*/React.forwardRef(({\n  title,\n  children,\n  bsPrefix,\n  rootCloseEvent,\n  variant,\n  size,\n  menuRole,\n  renderMenuOnMount,\n  disabled,\n  href,\n  id,\n  menuVariant,\n  flip,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  children: [/*#__PURE__*/_jsx(DropdownToggle, {\n    id: id,\n    href: href,\n    size: size,\n    variant: variant,\n    disabled: disabled,\n    childBsPrefix: bsPrefix,\n    children: title\n  }), /*#__PURE__*/_jsx(DropdownMenu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    variant: menuVariant,\n    flip: flip,\n    children: children\n  })]\n}));\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nexport default DropdownButton;","import React from \"react\";\nimport {\n  Navbar,\n  Nav,\n  Button,\n  Image,\n  ButtonGroup,\n  DropdownButton,\n  Dropdown,\n} from \"react-bootstrap\";\nimport Logo from \"../../assets/images/brand/logo/logo.svg\";\nimport { Link } from \"react-router-dom\";\nimport { FiChevronLeft } from \"react-icons/fi\";\nimport LoadingBar from \"../layout/LoadingBar/LoadingBar\";\nimport { imgixURL } from \"../../utils/siteUtils\";\n\nexport const MiniNavBar = ({\n  module,\n  currentSection,\n  updateCurrentSection,\n  setShowTestInfoModal,\n  showSectionList = true,\n}) => {\n  if (!module) {\n    return null;\n  }\n  return (\n    <>\n      <Navbar bg=\"white\" fixed=\"top\" style={{ height: \"50px\" }}>\n        <Navbar.Brand as={Link} to=\"/\">\n          <Image src={imgixURL(Logo)} alt=\"\" />\n        </Navbar.Brand>\n        {showSectionList && (\n          <ButtonGroup size=\"sm\" className=\"ms-auto mx-2\">\n            <DropdownButton\n              title={`${currentSection.section}`}\n              id=\"bg-nested-dropdown\"\n              size=\"sm\"\n              className=\"text-white\"\n              variant=\"outline-primary\"\n            >\n              {module.sections.map((section) => (\n                <Dropdown.Item\n                  eventKey={section.id}\n                  key={section.id}\n                  active={section.id === currentSection.id}\n                  onClick={() => updateCurrentSection(section.id)}\n                >\n                  {section.section}\n                </Dropdown.Item>\n              ))}\n            </DropdownButton>\n          </ButtonGroup>\n        )}\n\n        <DropdownButton\n          title=\"Menu\"\n          id=\"bg-nested-dropdown\"\n          size=\"sm\"\n          className=\"text-white ms-auto\"\n          variant=\"outline-primary\"\n        >\n          <Dropdown.Item eventKey=\"1\" as={Link} to={\"/\"}>\n            Home\n          </Dropdown.Item>\n          <Dropdown.Item\n            eventKey=\"2\"\n            onClick={() => setShowTestInfoModal(true)}\n          >\n            Test Info\n          </Dropdown.Item>\n        </DropdownButton>\n      </Navbar>\n      <LoadingBar />\n    </>\n  );\n};\n"],"names":["alignDirection","PropTypes","alignPropType","propTypes","DropdownButton","React.forwardRef","title","children","bsPrefix","rootCloseEvent","variant","size","menuRole","renderMenuOnMount","disabled","href","id","menuVariant","flip","props","ref","_jsxs","Dropdown","_jsx","DropdownToggle","DropdownMenu","DropdownButton$1","MiniNavBar","module","currentSection","updateCurrentSection","setShowTestInfoModal","showSectionList","jsxs","Fragment","Navbar","jsx","Link","Image","imgixURL","Logo","ButtonGroup","section","LoadingBar"],"mappings":"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","x_google_ignoreList":[0,1]}