{"version":3,"file":"VerifyEmailPage-b1d72fd3.js","sources":["../../src/pages/base/VerifyEmailPage.jsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { Container, Row, Col, Card, Accordion } from \"react-bootstrap\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport BaseForm from \"../../components/layout/BaseForm\";\nimport * as Yup from \"yup\";\nimport { DJANGO_BASE_URL } from \"../../utils/config\";\nimport usePublicAxios from \"../../utils/usePublicAxios\";\nimport AuthContext from \"../../context/AuthContext\";\n\nconst VerifyEmailPage = () => {\n  const location = useLocation();\n  const [defaultEmail, setDefaultEmail] = useState(\"\");\n  const api = usePublicAxios();\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  let { registerUser, registrationError, user } = useContext(AuthContext);\n  const [activeKey, setActiveKey] = useState(\"0\"); // New state for accordion active key\n  const { loginUserWithToken } = useContext(AuthContext);\n\n  useEffect(() => {\n    // Function to parse the URL query string\n    const queryParams = new URLSearchParams(location.search);\n    const email = queryParams.get(\"email\");\n\n    if (email) {\n      setDefaultEmail(email);\n    }\n  }, [location]);\n\n  useEffect(() => {\n    if (user) {\n      navigate(\"/\");\n    }\n  }, []);\n\n  const form_fields = [\n    {\n      type: \"email\",\n      label: \"Email\",\n      id: \"email\",\n      invalid_feedback: \"e.g. yourname@gmail.com\",\n      placeholder: \"Enter your Email Address\",\n      value: defaultEmail, // Set the default value\n    },\n    {\n      type: \"number\",\n      label: \"OTP\",\n      id: \"otp\",\n      invalid_feedback: \"e.g. 123456\",\n      placeholder: \"Enter OTP\",\n    },\n  ];\n\n  const resend_form_fields = [\n    {\n      type: \"email\",\n      label: \"Email\",\n      id: \"email\",\n      invalid_feedback: \"e.g. yourname@gmail.com\",\n      placeholder: \"Enter your Email Address\",\n      value: defaultEmail, // Set the default value\n    },\n  ];\n\n  const VerifySchema = Yup.object().shape({\n    email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n    otp: Yup.number()\n      .required(\"Required\")\n      .required(\"Required\")\n      .min(100000, \"OTP must be 6 digits\")\n      .max(999999, \"OTP must be 6 digits\"),\n  });\n\n  const ResentVerifySchema = Yup.object().shape({\n    email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n  });\n\n  const verifyEmail = async (values, handleSuccess) => {\n    try {\n      const response = await api.post(\n        DJANGO_BASE_URL + \"/account/verify_email/\",\n        values\n      );\n\n      // If verification is successful, use the token to log in the user\n      if (response.data.token) {\n        loginUserWithToken(response.data.token); // This function will be defined in AuthContext\n        handleSuccess();\n        navigate(\"/\"); // Navigate to home or dashboard\n      }\n    } catch (error) {\n      console.error(\"Error verifying email:\", error);\n      setError(error.response.data.message);\n    }\n  };\n\n  const resendOTP = async (values, handleSuccess) => {\n    try {\n      const response = await api.post(\n        DJANGO_BASE_URL + \"/account/send_verify_email/\",\n        values\n      );\n      handleSuccess();\n      setActiveKey(\"0\");\n    } catch (error) {\n      // Handle error accordingly\n      console.error(\"Error fetching data:\", error);\n      setError(error.response.data.message);\n    }\n  };\n\n  return (\n    <>\n      <Container className=\"mb-5\">\n        <Row className=\"align-items-center justify-content-center mt-5\">\n          <Col lg={5} md={8} className=\"\">\n            <Accordion activeKey={activeKey}>\n              <Accordion.Item eventKey=\"0\" onClick={() => setActiveKey(\"0\")}>\n                <Accordion.Header>\n                  {\" \"}\n                  <h4 className=\"mt-2 fw-bold\">Verify Email</h4>\n                </Accordion.Header>\n                <Accordion.Body>\n                  <div className=\"mb-4\">\n                    <span>\n                      We have sent you an email with a OTP to verify your email\n                      address. Please enter your email address and the OTP\n                      below.\n                    </span>\n                  </div>\n\n                  <BaseForm\n                    form_fields={form_fields}\n                    submit_label={\"Verify\"}\n                    validation_schema={VerifySchema}\n                    on_submit={verifyEmail}\n                    nonFieldErrors={error}\n                    successMessage=\"Verification Successful\"\n                  />\n                </Accordion.Body>\n              </Accordion.Item>\n              <Accordion.Item eventKey=\"1\" onClick={() => setActiveKey(\"1\")}>\n                <Accordion.Header>\n                  {\" \"}\n                  <h4 className=\"mt-2 fw-bold\">Resend OTP</h4>\n                </Accordion.Header>\n                <Accordion.Body>\n                  <div className=\"mb-4\">\n                    <span>\n                      We will send you an email with a OTP to verify your email,\n                      please enter your email address below.\n                    </span>\n                  </div>\n\n                  <BaseForm\n                    form_fields={resend_form_fields}\n                    submit_label={\"Send OTP\"}\n                    validation_schema={ResentVerifySchema}\n                    on_submit={resendOTP}\n                    nonFieldErrors={error}\n                    successMessage=\"Code Sent Successful\"\n                  />\n                </Accordion.Body>\n              </Accordion.Item>\n            </Accordion>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default VerifyEmailPage;\n"],"names":["VerifyEmailPage","location","useLocation","defaultEmail","setDefaultEmail","useState","api","usePublicAxios","error","setError","navigate","useNavigate","registerUser","registrationError","user","useContext","AuthContext","activeKey","setActiveKey","loginUserWithToken","useEffect","email","form_fields","resend_form_fields","VerifySchema","Yup.object","Yup.string","Yup.number","ResentVerifySchema","verifyEmail","values","handleSuccess","response","DJANGO_BASE_URL","resendOTP","jsx","Container","Row","Col","jsxs","Accordion","BaseForm"],"mappings":"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"}